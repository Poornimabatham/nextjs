// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



model User {
  id          String           @id @default(cuid())
  name        String?
  email       String           @unique
  password    String
  tasks       Task[] // Tasks created by user
  projects    Project[] // Projects owned by user
  assignments TaskAssignment[] // Tasks assigned to user
}

model Task {
  id          String           @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    String?
  status      String?
  createdById String
  createdBy   User             @relation(fields: [createdById], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assignments TaskAssignment[] // Many-to-many assignments
}

model Project {
  id          String           @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User             @relation(fields: [ownerId], references: [id])
  createdAt   DateTime         @default(now())
  tasks       TaskAssignment[] // Optional: if you want to connect tasks to project
}

model TaskAssignment {
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  assignedAt DateTime @default(now())
  Project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?

  @@id([taskId, userId]) // Composite Primary Key
    status     String?  // नया फ़ील्ड जोड़ो अगर चाहिए

}
